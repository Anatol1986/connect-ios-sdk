//
//  OBNetwork.m
//  Outbound
//
//  Created by Emilien on 2015-04-19.
//  Copyright (c) 2015 Outbound.io. All rights reserved.
//

#import "OBNetwork.h"

@interface OBNetwork ()

/**-----------------------------------------------------------------------------
 * @name Private methods
 * -----------------------------------------------------------------------------
 */

+ (NSMutableURLRequest *)requestWithPath:(NSString *)path APIKey:(NSString *)key;

/**
 @abstract A helper method to build the [NSURLRequest](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLRequest_Class/index.html) for an API call.
 @param path API call path. Possible paths as defined by the [Outbound API](https://github.com/outboundio/api) are `identify`, `track`, `apns/register`, `apns/disable`.
 @param key Host app API key.
 @param params API call parameters.
 @param error If an error occurs, upon return contains an NSError object that describes the problem.
 @discussion The NSURLRequest is generated by
 
- Building the endpoint URL by appending `/v2/[path]` to the OBServerUrl constant
- Setting HTTPMethod to `POST`
- Setting the timeout to the value of the OBNetworkTimeout constant
- Setting the `Content-Type` HTTP header to `application/json` and `X-Outbound-Key` to the value of the API key parameter
- Setting the `X-Outbound-GUID` to a unique string value for server side call deduping
- Serializing the parameters to JSON as the HTTPBody
 
 */
+ (NSMutableURLRequest *)postRequestWithPath:(NSString *)path APIKey:(NSString *)key parameters:(NSDictionary *)params andError:(NSError **)error;

/**
 @abstract A helper method to print details about the network request and its response to the console.
 */
+ (void)debugRequest:(NSURLRequest *)request withStatusCode:(NSInteger)code error:(NSError *)error andJson:(NSObject *)json;

@end

@implementation OBNetwork

#pragma mark - Helpers

+ (NSMutableURLRequest *)requestWithPath:(NSString *)path APIKey:(NSString *)key {
    // Build endpoint URL
    NSString *url = [NSString stringWithFormat:@"%@/%@", OBServerUrl, path];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:url]];
    request.timeoutInterval = OBNetworkTimeout;
    
    // Set headers
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [request setValue:key forHTTPHeaderField:@"X-Outbound-Key"];
    [request setValue:[NSUUID UUID].UUIDString forHTTPHeaderField:@"X-Outbound-GUID"];
    [request setValue:[NSString stringWithFormat:@"%@/%@", OBClientName, OBClientVersion] forHTTPHeaderField:@"X-Outbound-Client"];
    
    return request;
}

+ (NSMutableURLRequest *)postRequestWithPath:(NSString *)path APIKey:(NSString *)key parameters:(NSDictionary *)params andError:(NSError **)error {
    NSMutableURLRequest *request = [self requestWithPath:path APIKey:key];
    request.HTTPMethod = @"POST";
    
    // Serialize parameters into JSON
    NSData *payloadData = [NSJSONSerialization dataWithJSONObject:params options:0 error:error];
    
    // Just return (error is already set) if we can't serialize the JSON.
    if (!*error) {
        request.HTTPBody = payloadData;
    }
    
    return request;
}

+ (void)debugRequest:(NSURLRequest *)request withStatusCode:(NSInteger)code error:(NSError *)error andJson:(NSObject *)json {
    OBDebug(@"Network Request: %@ %@\n%@\n%@\n---\nResponse [%@]%@\n%@",
            request.HTTPMethod,
            [request.URL absoluteString],
            [request allHTTPHeaderFields],
            [[NSString alloc] initWithData:request.HTTPBody encoding:NSUTF8StringEncoding],
            @(code),
            error != nil ? [NSString stringWithFormat:@"\nError: %@", [error localizedDescription]] : @"",
            json);
}

#pragma mark - Action

+ (void)getPath:(NSString *)path withAPIKey:(NSString *)key andCompletion:(void (^)(NSInteger statusCode, NSError *error, NSObject *response))completion {

    NSMutableURLRequest *request = [self requestWithPath:path APIKey:key];
    [NSURLConnection sendAsynchronousRequest:request
                                       queue:[NSOperationQueue mainQueue]
                           completionHandler:^(NSURLResponse *response, NSData *data, NSError *requestError) {
                               NSObject *json = nil;
                               
                               // Deserialize response data
                               if (data && !requestError && [data length] > 0) {
                                   json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&requestError];
                               }
                               
                               NSHTTPURLResponse *r = (NSHTTPURLResponse *)response;
                               [self debugRequest:request withStatusCode:r.statusCode error:requestError andJson:json];
                               
                               // Execute completion block
                               completion(r.statusCode, requestError, json);
    }];
}

+ (void)postPath:(NSString *)path withAPIKey:(NSString *)key parameters:(NSDictionary *)params andCompletion:(void (^)(NSInteger statusCode, NSError *error, NSObject *response))completion {
    // Build request
    NSError *error = nil;
    NSURLRequest *request = [self postRequestWithPath:path APIKey:key parameters:params andError:&error];
    if (error) {
        completion(0, error, nil);
    } else {
        
        // Send request
        [NSURLConnection sendAsynchronousRequest:request
                                           queue:[NSOperationQueue mainQueue]
                               completionHandler:^(NSURLResponse *response, NSData *data, NSError *requestError) {
                                   
                                   NSObject *json = nil;
                                   
                                   // Deserialize response data
                                   if (data && !requestError && [data length] > 0) {
                                       json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&requestError];
                                   }
                                   
                                   NSHTTPURLResponse *r = (NSHTTPURLResponse *)response;
                                   [self debugRequest:request withStatusCode:r.statusCode error:requestError andJson:json];
                                   
                                   // Execute completion block
                                   completion(r.statusCode, requestError, json);
                               }];
    }
}

@end
